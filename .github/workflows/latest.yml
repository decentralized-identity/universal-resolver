name: Maven snapshot and Docker latest image

on:
  push:
    paths-ignore:
      - '.gitignore'
      - 'README.md'
      - 'LICENSE'
      - 'docs'
    branches: [ main, 'test-**' ]
  workflow_dispatch:

jobs:
  maven-snapshot:
    uses: danubetech/workflows/.github/workflows/maven-snapshot.yml@main
    with:
      MAVEN_REPO_SERVER_ID: 'danubetech-maven-snapshots'
    secrets:
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      CI_SECRET_READER_PERIODIC_TOKEN: ${{ secrets.CI_SECRET_READER_PERIODIC_TOKEN }}
      VAULTCA: ${{ secrets.VAULTCA }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  docker-latest:
    needs: [ maven-snapshot ]
    uses: danubetech/workflows/.github/workflows/docker-latest.yml@main
    with:
      GLOBAL_IMAGE_NAME: universalresolver/uni-resolver-web
      GLOBAL_REPO_NAME: docker.io
      PATH_TO_DOCKERFILE: uni-resolver-web/docker/Dockerfile
    secrets:
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      CI_SECRET_READER_PERIODIC_TOKEN: ${{ secrets.CI_SECRET_READER_PERIODIC_TOKEN }}
      VAULTCA: ${{ secrets.VAULTCA }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  docker-latest-multi-arch:
    needs: docker-latest
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/docker-multi-arch.yml
    with:
      GLOBAL_IMAGE_NAME: universalresolver/uni-resolver-web
      GLOBAL_REPO_NAME: docker.io
      IMAGE_TAG: latest
      PATH_TO_DOCKERFILE: uni-resolver-web/docker/Dockerfile
    secrets:
      CI_SECRET_READER_PERIODIC_TOKEN: ${{ secrets.CI_SECRET_READER_PERIODIC_TOKEN }}
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      VAULTCA: ${{ secrets.VAULTCA }}

  trigger-deployment:
    needs: [ docker-latest ]
    runs-on: ubuntu-latest
    steps:

      - name: Get current branch
        id: branch
        run: |
          echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Trigger AWS Kubernetes deployment
        uses: actions/github-script@v8
        env:
          BRANCH: ${{ steps.branch.outputs.branch_name }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'kubernetes-deploy-to-cluster.yml',
              ref: process.env.BRANCH
            })
